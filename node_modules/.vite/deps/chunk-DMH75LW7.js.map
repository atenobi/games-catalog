{
  "version": 3,
  "sources": ["../../react-redux/es/components/Context.js", "../../react-redux/es/hooks/useReduxContext.js"],
  "sourcesContent": ["import React from 'react';\nexport const ReactReduxContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactReduxContext.displayName = 'ReactRedux';\n}\n\nexport default ReactReduxContext;", "import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\n\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useReduxContext } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\nexport function useReduxContext() {\n  const contextValue = useContext(ReactReduxContext);\n\n  if (process.env.NODE_ENV !== 'production' && !contextValue) {\n    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');\n  }\n\n  return contextValue;\n}"],
  "mappings": ";;;;;;;;AAAA,mBAAkB;AACX,IAAM,oBAAiC,qBAAM,cAAc,IAAI;AAEtE,IAAI,MAAuC;AACzC,oBAAkB,cAAc;AAClC;;;ACLA,oBAA2B;AAmBpB,2BAA2B;AAChC,QAAM,eAAe,8BAAW,iBAAiB;AAEjD,MAA6C,CAAC,cAAc;AAC1D,UAAM,IAAI,MAAM,kGAAkG;AAAA,EACpH;AAEA,SAAO;AACT;",
  "names": []
}
